excel_file = "admDataSet.xls"
modelSheet_df = pd.read_excel('admDataSet.xls', sheet_name="Model", usecols='A:V')
dataSheet_df = pd.read_excel('admDataSet.xls', sheet_name="Data")

def inMac():
    Trg = pd.read_excel(excel_file,sheet_name="Model",usecols='B',nrows=5)
    Bkg = pd.read_excel(excel_file,sheet_name="Model",usecols='C',nrows=5)
    Hth = pd.read_excel(excel_file,sheet_name="Model",usecols='D',nrows=5)

    # Extract the frequency values from the first column of the DataFrame
    S4 = dataSheet_df.iloc[:-3,0].values.tolist()
    # print('S4:', S4)
    # Loading Frequency values from data to model sheet
    for i in range(len(S4)):
        # Get the value from the first column of the current row in "Data" sheet
        freqValues = S4[i]
        # print('freqValues:', freqValues)
        # Assign the value to S4 and the corresponding cell in "Model" sheet
        modelSheet_df.loc[7+i, 'A'] = freqValues

    if Trg.iloc[-1,0] != 0:
        # Target Spectrum
        S1 = dataSheet_df.iloc[:-3,1].values.tolist()
        # print('S1:', S1)
        for i in range(len(S1)):
            targetValues = S1[i]
            # print('targetValues:', targetValues)
            modelSheet_df.iloc[i+7, 1] = targetValues

        # Load D3 Value from Data sheet to Model sheet
        D3 = dataSheet_df.iloc[24,Trg.iloc[-1].astype(int)].values
        # print('D3:' ,D3)
        modelSheet_df.iloc[2,2] = D3

    # else:
    #     # Check if a distance value exists in Cell C3 for Microphone from Source
    #     Rg1 = modelSheet_df.iloc[2, 2]
    #
    #     if isinstance(Rg1, (int, float)) and len(str(Rg1)) > 0:
    #         D3 = Rg1
    #
    #     else:
    #         # MsgBox("Enter a Distance in meters in Cell C3 for Microphone from Source")
    #         return

    if Bkg.iloc[-1,0] != 0:
        S6 = dataSheet_df.iloc[:-3,Bkg.iloc[-1,0]].values.tolist()
        for i in range(len(S6)):
            bkgNoiseValues = S6[i]
            # print('bkgNoiseValues:', bkgNoiseValues)
            modelSheet_df.iloc[i+7, 2] = bkgNoiseValues

    if Hth.iloc[-1,0] != 0:
        s5 = dataSheet_df.iloc[:-3,Hth.iloc[-1,0]].values.tolist()
        for i in range(len(s5)):
            hearingValues = s5[i]
            # print('Hearing values:', hearingValues)
            modelSheet_df.iloc[i+7, 3] = s5[i]

    # -----------------------------------------------------------------------------------------------
    # Loading Ai weights
    s5 = dataSheet_df.iloc[:-3,35].values.tolist()
    AiWt = dataSheet_df.iloc[:-3,37].values.tolist()
    # print('S5:',S5)
    # print('AiWt:',AiWt)

    Log10Div10 = 0.230258509
    TenDivLog10 = 1 / Log10Div10
    Log10 = 2.302585093
    Co = 331.32
    Too = 273.15
    A1 = 0.001

    # m Source Height meas
    h2ref = pd.read_excel(excel_file, sheet_name='Model', usecols='A', nrows=3)
    h2ref = h2ref.iloc[-2,0]

    # m Mic Height meas
    h3ref = pd.read_excel(excel_file, sheet_name='Model', usecols='B', nrows=3)
    h3ref = h3ref.iloc[-2,0]

    # Deg C meas
    tRef = pd.read_excel(excel_file, sheet_name='Model', usecols='D', nrows=3)
    tRef = tRef.iloc[-2,0]

    # % r.h. meas
    hRef = pd.read_excel(excel_file, sheet_name='Model', usecols='E', nrows=3)
    hRef = hRef.iloc[-2,0]

    # m Flow resistivity meas
    sigmaRef = pd.read_excel(excel_file, sheet_name='Model', usecols='F', nrows=3)
    sigmaRef = sigmaRef.iloc[-2,0]

    # Em2 turbulence factor meas
    em2Ref = pd.read_excel(excel_file, sheet_name='Model', usecols='G', nrows=3)
    em2Ref = em2Ref.iloc[-2,0]

    t1 = tRef
    h1 = hRef

    # Reference Calc call

    # m Source Height det
    h2 = pd.read_excel(excel_file, sheet_name='Model', usecols='H', nrows=3)
    h2 = h2.iloc[-2,0]

    # m Listener Height det
    h3 = pd.read_excel(excel_file, sheet_name='Model', usecols='I', nrows=3)
    h3 = h3.iloc[-2,0]

    # Deg C det
    t1 = pd.read_excel(excel_file, sheet_name='Model', usecols='J', nrows=3)
    t1 = t1.iloc[-2,0]

    # % r.h. det
    h1 = pd.read_excel(excel_file, sheet_name='Model', usecols='K', nrows=3)
    h1 = h1.iloc[-2,0]

    # m Flow resistivity det
    sigmaDelt = pd.read_excel(excel_file, sheet_name='Model', usecols='L', nrows=3)
    sigmaDelt = sigmaDelt.iloc[-2,0]

    # Em2 turbulence factor det
    em2Det = pd.read_excel(excel_file, sheet_name='Model', usecols='M', nrows=3)
    em2Det = em2Det.iloc[-2,0]

    # Wind speed det
    windSpeed = pd.read_excel(excel_file, sheet_name='Model', usecols='N', nrows=3)
    windSpeed = windSpeed.iloc[-2,0]

    # Observer efficiency
    e1 = pd.read_excel(excel_file, sheet_name='Model', usecols='R', nrows=3)
    e1 = e1.iloc[-2,0]

    # Hit prob
    p1 = pd.read_excel(excel_file, sheet_name='Model', usecols='S', nrows=3)
    p1 = p1.iloc[-2,0]

    # False alarm prop
    p2 = pd.read_excel(excel_file, sheet_name='Model', usecols='T', nrows=3)
    p2 = p2.iloc[-2,0]

    # Calculate d' statistic
    # D1 = Dprime
    # Range(u3).value = D1

    windFlag = 0
    windDir = "Upwind"

    # barrier? 0 or 1
    b9 = pd.read_excel(excel_file, sheet_name='Model', usecols='H', nrows=5)

    # distance from source m
    b7 = pd.read_excel(excel_file, sheet_name='Model', usecols='I', nrows=5)

    # height m
    b8 = pd.read_excel(excel_file, sheet_name='Model', usecols='J', nrows=5)

    # foliage? 0 or 1
    N1 = pd.read_excel(excel_file, sheet_name='Model', usecols='K', nrows=5)
    N1 = N1 = N1.iloc[-2, 0]

    # distance in meters from source to near edge of foliage
    W1 = pd.read_excel(excel_file, sheet_name='Model', usecols='L', nrows=5)
    W1 = W1.iloc[-2, 0]

    # depth (extent) of foliage in meters
    W2 = pd.read_excel(excel_file, sheet_name='Model', usecols='M', nrows=5)
    W2 = W2.iloc[-2, 0]

    # leaf area per unit vol dense hardwood brush in m^-1
    Fl = pd.read_excel(excel_file, sheet_name='Model', usecols='N', nrows=5)
    Fl = Fl.iloc[-2, 0]

    # average leaf width in cm
    Al = pd.read_excel(excel_file, sheet_name='Model', usecols='O', nrows=5)
    Al = Al.iloc[-2, 0]

    # Type of surface
    F7 = 1
    Iwthr1 = 0
    Surface = "Grass"

    # Default background number 12=G.C. 11=Low EPA
    Bnumber = 11

    # Typical vehicle
    Tnumber = 3

    # ISO Hearing Threshold for Pure tones
    Hnumber = 2



inMac()
