#Variable Declarations

#A1 ->  Average leaf width in cm
#Cs ->
#D4 ->  Detection distance
#Fo ->  Foliage tten
#F1 ->  Leaf area per unit vol. dense hardwood brush in m^-1
#Ka ->
#N1 ->  Foliated-zone numbers
#W1 ->  Distance in meters from source to near edge of foliage        
#W2 ->  Depth (extent) of foliage in meters
#X2 ->
#S3 ->  Propagation Loss cumulative
#S4 ->  Frequency
#S8 ->  Propagation Loss individual


import math


S4 = [50, 63, 80, 100, 125, 160, 200, 250, 315, 400, 500, 630, 800, 1000, 1250, 1600, 2000, 2500, 3150, 4000, 5000,
      6300, 8000, 10000]
N1 = 1
D4 = 30
W1 = 1
W2 = 100
Fl = 0.5
Cs = 340.29
Al = 3.2
S8 = [0] * 24
S3 = [0] * 24


def Foliage(N1, D4, W1, W2, Fl, Cs, Al, S4, S8, S3):
    Fo = [-0.001] * 24
    Fo_list = []

    if N1 > 0:
        # If detection distance is greater than the distance from source to edge of foliage
        if D4 > W1:
            # Sets the distance difference to X2
            X2 = D4 - W1
            # If the new detection distance is greater than depth (extent) of foliage in meters
            if X2 > W2:
                # Set distance the depth (extent) of foliage in meters
                X2 = W2
            X2 = math.sqrt(X2)
            Cons = 2.647 / math.log(10)

            for I in range(10, 24):
                Ka = (2 * math.pi * S4[I] / Cs) * Al / 100
                if Ka < 0.401:
                    Fo[I] = -0.01
                elif Ka < 5:
                    Fo[I] = -X2 * math.sqrt(Fl) * (Cons * math.log(Ka) + 1.05)
                else:
                    Fo[I] = -X2 * math.sqrt(Fl) * 2.9
                Fo_list.append(Fo)
    else:
        for I in range(0, 24):
            S8[I] = Fo[I]
            S3[I] = S3[I] + S8[I]
            Fo_list.append(S3)
    return Fo_list


Fo_values = Foliage(N1, D4, W1, W2, Fl, Cs, Al, S4, S8, S3)
print(Fo_values)

